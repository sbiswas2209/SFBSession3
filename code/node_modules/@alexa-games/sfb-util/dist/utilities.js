"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *   http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeCommandLineParameter = exports.readUtf8FileExcludingBomSync = exports.readUtf8FileExcludingBom = exports.escapeRegExp = void 0;
// Alexa-Util Module. Useful Alexa functions for any Alexa Games skill. Put those things in here please if they don't fit in any other module.
const fs = __importStar(require("fs"));
function escapeRegExp(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
exports.escapeRegExp = escapeRegExp;
function readUtf8FileExcludingBom(path) {
    return new Promise((resolve, reject) => {
        fs.readFile(path, { encoding: 'utf8' }, (err, data) => {
            if (err) {
                reject(err);
            }
            else {
                const content = stripBom(data);
                resolve(content);
            }
        });
    });
}
exports.readUtf8FileExcludingBom = readUtf8FileExcludingBom;
function readUtf8FileExcludingBomSync(path) {
    const data = fs.readFileSync(path, { encoding: 'utf8' });
    return stripBom(data);
}
exports.readUtf8FileExcludingBomSync = readUtf8FileExcludingBomSync;
function stripBom(content) {
    if (content.charCodeAt(0) === 0xFEFF) {
        return content.slice(1);
    }
    else {
        return content;
    }
}
function sanitizeCommandLineParameter(parameterValue) {
    if (parameterValue === null || parameterValue === undefined) {
        throw new Error('parameterValue must have a value');
    }
    return parameterValue.toString().replace(/[\\"'${}\r\n]/g, '');
}
exports.sanitizeCommandLineParameter = sanitizeCommandLineParameter;
//# sourceMappingURL=utilities.js.map