"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *   http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const s3AudioAccessor_1 = require("./../audioAccessor/s3AudioAccessor");
const aws_sdk_1 = require("aws-sdk");
const assert_1 = require("assert");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
describe("S3 Audio Accessor integration test", function () {
    before(async () => {
        const workingDir = path.resolve(".", ".out");
        if (!fs.existsSync(workingDir)) {
            fs.mkdirSync(workingDir);
        }
    });
    it("test custom s3 client.", async function () {
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "sfb-example/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir,
            s3Client: new aws_sdk_1.S3()
        });
        assert_1.strict.ok(audioFileAccessor);
    });
    it("test upload audio.", async function () {
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "sfb-example/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        const output = await audioFileAccessor.uploadAudio(testFileName, outDir);
        assert_1.strict.equal(output, "https://s3.amazonaws.com/sfb-example/tempPolly/pollyCache/" + testFileName);
        // Make sure it is in the s3 file status cache
        assert_1.strict(s3AudioAccessor_1.s3FileStatusStaticCache[`sfb-example/tempPolly:${s3AudioAccessor_1.S3AudioAccessor.CACHE_DIR_NAME}/${testFileName}`] === s3AudioAccessor_1.S3FileStatus.Exists);
    });
    it("test upload audio invalid filename.", async function () {
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test_invalid.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "sfb-example/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        try {
            const output = await audioFileAccessor.uploadAudio(testFileName, outDir);
        }
        catch (err) {
            assertIncludes(err, "");
            // Make sure not in the S3 file status cache on error
            assert_1.strict(!s3AudioAccessor_1.s3FileStatusStaticCache[`sfb-example/tempPolly:${s3AudioAccessor_1.S3AudioAccessor.CACHE_DIR_NAME}/${testFileName}`]);
        }
    });
    it("test download audio.", async function () {
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "sfb-example/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        await audioFileAccessor.downloadAudio('https://sfb-framework.s3.amazonaws.com/examples/sounds/Trumpet_1.mp3', outDir);
        const resultPath = path.resolve(outDir, "Trumpet_1.mp3");
        assert_1.strict.equal(fs.existsSync(resultPath), true, `Generated test file '${resultPath}' not found.`);
    });
    it("test download audio invalid url.", async function () {
        const outDir = path.resolve('.', '.out');
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "sfb-example/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        try {
            await audioFileAccessor.downloadAudio('htinvalidtps://s3.amazonaws.com/sfb-framework/examples/sounds/Trumpet_1_invalid_url.mp3', outDir);
        }
        catch (err) {
            assertIncludes(err, "invalid");
            // Make sure not in the S3 file status cache on error
            assert_1.strict(!s3AudioAccessor_1.s3FileStatusStaticCache[`sfb-example/tempPolly:${s3AudioAccessor_1.S3AudioAccessor.CACHE_DIR_NAME}/Trumpet_1_invalid_url.mp3`]);
        }
    });
    it("test audio exists.", async function () {
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "sfb-example/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        const exists = await audioFileAccessor.exists(testFileName);
        assert_1.strict.ok(exists);
        // Make sure it exists if the file status cache
        assert_1.strict(s3AudioAccessor_1.s3FileStatusStaticCache[`sfb-example/tempPolly:${s3AudioAccessor_1.S3AudioAccessor.CACHE_DIR_NAME}/${testFileName}`] === s3AudioAccessor_1.S3FileStatus.Exists);
        // Make sure cached calls return same status
        const exists2 = await audioFileAccessor.exists(testFileName);
        assert_1.strict.ok(exists2);
    });
    it("test audio file that does not exist.", async function () {
        const outDir = path.resolve('.', '.out');
        const testFileName = 'file_that_does_not_exist.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "sfb-example/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        const exists = await audioFileAccessor.exists(testFileName);
        assert_1.strict.ok(!exists);
        // Make sure it does not exists if the file status cache
        assert_1.strict(s3AudioAccessor_1.s3FileStatusStaticCache[`sfb-example/tempPolly:${s3AudioAccessor_1.S3AudioAccessor.CACHE_DIR_NAME}/${testFileName}`] === s3AudioAccessor_1.S3FileStatus.NotExists);
        // Make sure cached calls return same status
        const exists2 = await audioFileAccessor.exists(testFileName);
        assert_1.strict.ok(!exists2);
    });
    function assertIncludes(line, includes) {
        assert_1.strict.ok(line.includes(includes), "Line: " + line + " must include " + includes);
    }
});
//# sourceMappingURL=s3AudioAccessor.integ-spec.js.map