"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *   http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const pollyUtil_1 = require("./../pollyUtil");
const s3AudioAccessor_1 = require("./../audioAccessor/s3AudioAccessor");
const assert_1 = require("assert");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
describe("Polly utility integration test", function () {
    before(async () => {
        const workingDir = path.resolve(".", ".out");
        if (!fs.existsSync(workingDir)) {
            fs.mkdirSync(workingDir);
        }
    });
    it("synthesize polly and download file with AWS Profile Name.", async function () {
        pollyUtil_1.PollyUtil.configurePolly({
            awsProfileName: "default",
            awsRegion: "us-east-1"
        });
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "sfb-example/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        const util = new pollyUtil_1.PollyUtil(audioFileAccessor);
        await util.synthesize({
            delayMs: 0,
            engine: "standard",
            name: "Joanna",
            pitch: "+0%",
            rate: "100%",
            text: "<speak>hello this is a test synthesize.</speak>",
            volume: "1.0"
        }, outDir, testFileName);
        const resultPath = path.resolve(outDir, testFileName);
        assert_1.strict.equal(fs.existsSync(resultPath), true, `Generated test file '${resultPath}' not found.`);
    });
    it("synthesize polly and download file with pitch & rate change.", async function () {
        pollyUtil_1.PollyUtil.configurePolly({
            awsProfileName: "default",
            awsRegion: "us-east-1"
        });
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test_pitched.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "sfb-example/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        const util = new pollyUtil_1.PollyUtil(audioFileAccessor);
        await util.synthesize({
            delayMs: 0,
            engine: "standard",
            name: "Joanna",
            pitch: "+10%",
            rate: "120%",
            text: "<speak>hello this is a test synthesize.</speak>",
            volume: "1.0"
        }, outDir, testFileName);
        const resultPath = path.resolve(outDir, testFileName);
        assert_1.strict.equal(fs.existsSync(resultPath), true, `Generated test file '${resultPath}' not found.`);
    });
    it("synthesize without <speak> tag.", async function () {
        pollyUtil_1.PollyUtil.configurePolly({
            awsProfileName: "default",
            awsRegion: "us-east-1"
        });
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_no_speak.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "sfb-example/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        const util = new pollyUtil_1.PollyUtil(audioFileAccessor);
        await util.synthesize({
            delayMs: 0,
            engine: "standard",
            name: "Joanna",
            pitch: "+0%",
            rate: "100%",
            text: "hello this is a test synthesize.",
            volume: "-6dB"
        }, outDir, testFileName);
        const resultPath = path.resolve(outDir, testFileName);
        assert_1.strict.equal(fs.existsSync(resultPath), true, `Generated test file '${resultPath}' not found.`);
    });
    it("estimate non audio tag duration.", async function () {
        pollyUtil_1.PollyUtil.configurePolly({
            awsRegion: "us-east-1",
            awsProfileName: "default"
        });
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "sfb-example/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        const util = new pollyUtil_1.PollyUtil(audioFileAccessor);
        await util.estimateSSMLDuration("This is my SSML text here. <audio src='https://sfb-framework.s3.amazonaws.com/examples/sounds/Trumpet_1.mp3' /> Yay!", outDir);
    });
    it("estimate non audio tag duration invalid ssml request.", async function () {
        pollyUtil_1.PollyUtil.configurePolly({
            awsRegion: "us-east-1",
            awsProfileName: "default"
        });
        const outDir = path.resolve('.', '.out');
        const testFileName = 'synthesize_test.mp3';
        const audioFileAccessor = new s3AudioAccessor_1.S3AudioAccessor({
            bucketName: "sfb-example/tempPolly",
            s3DomainName: "s3.amazonaws.com",
            audioWorkingDir: outDir
        });
        const util = new pollyUtil_1.PollyUtil(audioFileAccessor);
        try {
            await util.estimateSSMLDuration("<spebroken>This is my SSML text here. <audio src='https://sfb-framework.s3.amazonaws.com/examples/sounds/Trumpet_1.mp3' /> Yay!", outDir);
        }
        catch (err) {
            assertIncludes(err.message, "Invalid SSML request");
        }
    });
    function assertIncludes(line, includes) {
        assert_1.strict.ok(line.includes(includes), "Line: " + line + " must include " + includes);
    }
});
//# sourceMappingURL=sfbPolly.integ-spec.js.map