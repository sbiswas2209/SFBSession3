{"version":3,"file":"SFBExtension.js","sourceRoot":"","sources":["../../extensions/SFBExtension.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;;AA8GH,SAAgB,sBAAsB,CAAC,SAAqE;IACxG,OAAO,IAAI,CAAC,CAAC,kHAAkH;AACnI,CAAC;AAFD,wDAEC;AAED,SAAgB,iBAAiB,CAAC,SAAqE;IACnG,OAAyB,SAAU,CAAC,GAAG,KAAK,SAAS,CAAC;AAC1D,CAAC;AAFD,8CAEC;AAED,SAAgB,mBAAmB,CAAC,SAAqE;IACrG,OAA2B,SAAU,CAAC,qBAAqB,KAAK,SAAS,CAAC;AAC9E,CAAC;AAFD,kDAEC;AAED,wFAAuF;AAA9E,sIAAA,yBAAyB,OAAA;AAClC,gFAA+E;AAAtE,8HAAA,qBAAqB,OAAA;AAC9B,sEAAqE;AAA5D,oHAAA,gBAAgB,OAAA;AACzB,0EAAyE;AAAhE,wHAAA,kBAAkB,OAAA","sourcesContent":["/* \n * Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.\n *\n * SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *   http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n\nimport { StoryAccessor } from '../story/storyAccessor';\nimport { PlayStage } from '../driver/PlayStage';\n\nimport { SFBDriver } from \"../driver/driver\";\n\nimport { SourceContentHelper } from '../importPlugins/sourceContentHelper';\nimport { StoryMetadataHelper } from '../importPlugins/storyMetadataHelper';\nimport { UserInputHelper } from '../importPlugins/userInputHelper';\n\n/**\n * Implement ImporterExtension to modify the source content (string),\n * and/or modify the imported content (resulting StoryMetadata).\n */\nexport interface ImporterExtension {\n    /**\n     * Called before the import process begins.\n     * Implement to modify the raw source content before importing.\n     */\n    extendSourceContent(sourceHelper: SourceContentHelper): Promise<void>;\n\n    /**\n     * Called right after the content has been imported as a StoryMetadata object.\n     * Implement to process and modify the imported object.\n     */\n    extendImportedContent(metadataHelper: StoryMetadataHelper): Promise<void>;\n}\n\n/**\n * Parameter interface for DriverExtension\n */\nexport interface DriverExtensionParameter {\n    /**\n     * story variable name to variable value mapping. Story variables persisted per user.\n     */\n    storyState: {[key: string]: any};\n\n    /**\n     * instance of a helper class to get / modify prased UserInput object.\n     */\n    userInputHelper: UserInputHelper;\n\n    /**\n     * instance of the driver, currently processing the story.\n     */\n    driver: SFBDriver;\n\n    /**\n     * locale\n     */\n    locale: string;\n}\n\n/**\n * Implement DriverExtension to modify the incoming UserInput or to add to the resulting output.\n */\nexport interface DriverExtension {\n    /**\n     * Called right before the driver processes the story.\n     */\n    pre(param: DriverExtensionParameter): Promise<void>;\n\n    /**\n     * Called right after the driver finished processing the story.\n     */\n    post(param: DriverExtensionParameter): Promise<void>;\n}\n\n/**\n * Parameter interface for InstructionExtension.\n */\nexport interface InstructionExtensionParameter {\n    /**\n     * name of the custom instruction\n     */\n    instructionName: string;\n\n    /**\n     * parameters provided along with the custom instruction call\n     */\n    instructionParameters: {[key: string]: string}\n\n    /**\n     * variable name to variable value mapping. Story variables are persisted per user.\n     */\n    storyState: {[key: string]: any};\n\n    /**\n     * accessor for imported story metadata\n     */\n    storyAccessor: StoryAccessor;\n\n    /**\n     * Speech, reprompt, audio, and visual properties objects staged so far. Information here is used to respond with.\n     */\n    playStage: PlayStage;\n}\n\n/**\n * Implement InstructionExtensinon to define the behavior of your custom instructions.\n * \n * Story Driver checks for a public method of this instance matching the name of the custom instruction used in the story.\n * If such a method exists, the driver calls the method with an instance of InstructionExtensionParameter as an argument.\n * \n * If multiple extensions have a support for a same custom instruction, all methods are executed in the order of extensions added.\n */\nexport interface InstructionExtension {\n}\n\nexport function isInstructionExtension(extension: InstructionExtension | DriverExtension | ImporterExtension ): extension is InstructionExtension {\n    return true; // Since \"InstructionExtension\" doesn't have required methods, any object is \"technically\" an InstructionExtension\n}\n\nexport function isDriverExtension(extension: InstructionExtension | DriverExtension | ImporterExtension ): extension is DriverExtension {\n    return (<DriverExtension>extension).pre !== undefined;\n}\n\nexport function isImporterExtension(extension: InstructionExtension | DriverExtension | ImporterExtension): extension is ImporterExtension {\n    return (<ImporterExtension>extension).extendImportedContent !== undefined;\n}\n\nexport { GlobalDirectionsExtension } from './coreExtensions/GlobalDirectionsExtension';\nexport { LocalizationExtension } from './coreExtensions/LocalizationExtension';\nexport { SnippetExtension } from './coreExtensions/SnippetExtension';\nexport { VoiceOverExtension } from './coreExtensions/VoiceOverExtension';\n"]}