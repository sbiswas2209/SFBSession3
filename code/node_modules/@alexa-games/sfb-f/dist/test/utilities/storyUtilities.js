"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *   http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getISPMapping = exports.loadAllContent = exports.loadTestResourceAsObject = exports.loadTestResource = exports.loadTestStory = exports.GLOBAL_TEST_STORY_DIRECTORY = exports.NEGATIVE_TEST_STORY_DIRECTORY_MISSING_START = exports.POSITIVE_TEST_STORY_DIRECTORY = void 0;
const path = __importStar(require("path"));
const sfb_util_1 = require("@alexa-games/sfb-util");
exports.POSITIVE_TEST_STORY_DIRECTORY = './test/positive_test_cases';
exports.NEGATIVE_TEST_STORY_DIRECTORY_MISSING_START = './test/negative_test_cases/missing_start_scene';
exports.GLOBAL_TEST_STORY_DIRECTORY = './test/global_test_cases';
function loadTestStory(storyFileDirectory, fileName) {
    const fullPath = path.resolve(path.join(storyFileDirectory, fileName));
    // console.log(`fullPath=${fullPath}`);
    return sfb_util_1.readUtf8FileExcludingBomSync(fullPath);
}
exports.loadTestStory = loadTestStory;
function loadTestResource(storyFileDirectory, fileName) {
    const fullPath = path.resolve(path.join(storyFileDirectory, 'resources', fileName));
    // console.log(`fullPath=${fullPath}`);
    return sfb_util_1.readUtf8FileExcludingBomSync(fullPath);
}
exports.loadTestResource = loadTestResource;
function loadTestResourceAsObject(storyFileDirectory, fileName) {
    const fullPath = path.resolve(path.join(storyFileDirectory, 'resources', fileName));
    // console.log(`fullPath=${fullPath}`);
    return JSON.parse(sfb_util_1.readUtf8FileExcludingBomSync(fullPath));
}
exports.loadTestResourceAsObject = loadTestResourceAsObject;
function loadAllContent(storyFileDirectory, storyFileList) {
    const contentList = [];
    for (let storyFile of storyFileList) {
        contentList.push({
            id: storyFile,
            text: loadTestStory(storyFileDirectory, storyFile)
        });
    }
    return contentList;
}
exports.loadAllContent = loadAllContent;
function getISPMapping(storyFileDirectory, ispFile) {
    let ispJSON = JSON.parse(loadTestResource(storyFileDirectory, ispFile));
    let ispMapping = {};
    for (let i = 0; i < ispJSON.length; i++) {
        ispMapping[ispJSON[i].productName] = ispJSON[i].ISPID;
    }
    return ispMapping;
}
exports.getISPMapping = getISPMapping;
//# sourceMappingURL=storyUtilities.js.map