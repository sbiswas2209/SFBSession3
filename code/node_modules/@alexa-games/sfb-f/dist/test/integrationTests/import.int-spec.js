"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *   http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const importer_1 = require("../../importer/importer");
const assert_1 = require("assert");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const DEFAULT_IMPORT_PLUGIN_NAME = "default";
const TEST_STORY_TITLE = "Test Story";
const TEST_STORY_ID = "test-id";
const TEST_BUILT_IN_COUNT = 23;
describe("Scene Transition Baseline", function () {
    let thinImporter;
    before(async function () {
        console.log("Reset SFBImporter...");
        thinImporter = new importer_1.SFBImporter([], undefined, []);
    });
    it("Import - split utterances into two groups", async function () {
        const testFileName = "utterance-splitting.abc";
        const importResult = await thinImporter.importABCStory(DEFAULT_IMPORT_PLUGIN_NAME, "", TEST_STORY_TITLE, TEST_STORY_ID, true, {
            contents: [
                {
                    id: testFileName,
                    text: fs.readFileSync(getTestResourcePath(testFileName), "utf8")
                }
            ]
        });
        const model = importResult.alexaVoiceModel;
        assert_1.strict.equal(model.languageModel.intents.length - TEST_BUILT_IN_COUNT, 2, "Unexpected number of intents for given test.");
    });
    it("Import - build up intent for addional utterance", async function () {
        const testFileName = "intent-build-up.abc";
        const importResult = await thinImporter.importABCStory(DEFAULT_IMPORT_PLUGIN_NAME, "", TEST_STORY_TITLE, TEST_STORY_ID, true, {
            contents: [
                {
                    id: testFileName,
                    text: fs.readFileSync(getTestResourcePath(testFileName), "utf8")
                }
            ]
        });
        const model = importResult.alexaVoiceModel;
        assert_1.strict.equal(model.languageModel.intents.length - TEST_BUILT_IN_COUNT, 1, "Unexpected number of intents for given test.");
    });
    it("Import - normal intent splitting per choice", async function () {
        const testFileName = "normal-intent-split-per-choice.abc";
        const importResult = await thinImporter.importABCStory(DEFAULT_IMPORT_PLUGIN_NAME, "", TEST_STORY_TITLE, TEST_STORY_ID, true, {
            contents: [
                {
                    id: testFileName,
                    text: fs.readFileSync(getTestResourcePath(testFileName), "utf8")
                }
            ]
        });
        const model = importResult.alexaVoiceModel;
        assert_1.strict.equal(model.languageModel.intents.length - TEST_BUILT_IN_COUNT, 3, "Unexpected number of intents for given test.");
    });
});
function getTestResourcePath(testResourceName) {
    return path.resolve(__dirname, "..", // ./dist/test
    "..", // ./dist,
    "..", // ./
    "test", // ./test
    "integrationTests", // ./test/integrationTests
    "testResources", // ./test/integrationTests/testResources
    testResourceName);
}
//# sourceMappingURL=import.int-spec.js.map