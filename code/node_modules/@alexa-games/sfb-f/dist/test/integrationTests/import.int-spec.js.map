{"version":3,"file":"import.int-spec.js","sourceRoot":"","sources":["../../../test/integrationTests/import.int-spec.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;GAeG;;;;;;;;;;;;;;;;;;;;;AAEH,sDAAoD;AAGpD,mCAA0C;AAE1C,uCAAyB;AACzB,2CAA6B;AAE7B,MAAM,0BAA0B,GAAW,SAAS,CAAC;AACrD,MAAM,gBAAgB,GAAW,YAAY,CAAC;AAC9C,MAAM,aAAa,GAAW,SAAS,CAAC;AAExC,MAAM,mBAAmB,GAAW,EAAE,CAAC;AAEvC,QAAQ,CAAC,2BAA2B,EAAE;IAClC,IAAI,YAAyB,CAAC;IAE9B,MAAM,CAAC,KAAK;QACR,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;QACpC,YAAY,GAAG,IAAI,sBAAW,CAAC,EAAE,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;IACtD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK;QACjD,MAAM,YAAY,GAAW,yBAAyB,CAAC;QACvD,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,cAAc,CAAC,0BAA0B,EAAE,EAAE,EAAE,gBAAgB,EAAE,aAAa,EAAE,IAAI,EAAE;YAC1H,QAAQ,EAAE;gBACN;oBACI,EAAE,EAAE,YAAY;oBAChB,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,mBAAmB,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC;iBACnE;aACJ;SACJ,CAAC,CAAC;QAEH,MAAM,KAAK,GAAe,YAAY,CAAC,eAAe,CAAC;QAEvD,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,GAAG,mBAAmB,EAAE,CAAC,EAAE,8CAA8C,CAAC,CAAC;IAC9H,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK;QACvD,MAAM,YAAY,GAAW,qBAAqB,CAAC;QACnD,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,cAAc,CAAC,0BAA0B,EAAE,EAAE,EAAE,gBAAgB,EAAE,aAAa,EAAE,IAAI,EAAE;YAC1H,QAAQ,EAAE;gBACN;oBACI,EAAE,EAAE,YAAY;oBAChB,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,mBAAmB,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC;iBACnE;aACJ;SACJ,CAAC,CAAC;QAEH,MAAM,KAAK,GAAe,YAAY,CAAC,eAAe,CAAC;QAEvD,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,GAAG,mBAAmB,EAAE,CAAC,EAAE,8CAA8C,CAAC,CAAC;IAC9H,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK;QACnD,MAAM,YAAY,GAAW,oCAAoC,CAAC;QAClE,MAAM,YAAY,GAAG,MAAM,YAAY,CAAC,cAAc,CAAC,0BAA0B,EAAE,EAAE,EAAE,gBAAgB,EAAE,aAAa,EAAE,IAAI,EAAE;YAC1H,QAAQ,EAAE;gBACN;oBACI,EAAE,EAAE,YAAY;oBAChB,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,mBAAmB,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC;iBACnE;aACJ;SACJ,CAAC,CAAC;QAEH,MAAM,KAAK,GAAe,YAAY,CAAC,eAAe,CAAC;QAEvD,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,GAAG,mBAAmB,EAAE,CAAC,EAAE,8CAA8C,CAAC,CAAC;IAC9H,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,SAAS,mBAAmB,CAAC,gBAAwB;IACjD,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,EACzB,IAAI,EAAE,cAAc;IACpB,IAAI,EAAE,UAAU;IAChB,IAAI,EAAE,KAAK;IACX,MAAM,EAAE,SAAS;IACjB,kBAAkB,EAAE,0BAA0B;IAC9C,eAAe,EAAE,wCAAwC;IACzD,gBAAgB,CAAC,CAAC;AAC1B,CAAC","sourcesContent":["/* \n * Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.\n *\n * SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *   http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n\nimport {SFBImporter} from '../../importer/importer';\nimport {VoiceModel} from './../../bakeUtilities/languageModel';\n\nimport { strict as assert } from 'assert';\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nconst DEFAULT_IMPORT_PLUGIN_NAME: string = \"default\";\nconst TEST_STORY_TITLE: string = \"Test Story\";\nconst TEST_STORY_ID: string = \"test-id\";\n\nconst TEST_BUILT_IN_COUNT: number = 23;\n\ndescribe(\"Scene Transition Baseline\", function () {\n    let thinImporter: SFBImporter;\n\n    before(async function () {\n        console.log(\"Reset SFBImporter...\");\n        thinImporter = new SFBImporter([], undefined, []);\n    });\n\n    it(\"Import - split utterances into two groups\", async function() {\n        const testFileName: string = \"utterance-splitting.abc\";\n        const importResult = await thinImporter.importABCStory(DEFAULT_IMPORT_PLUGIN_NAME, \"\", TEST_STORY_TITLE, TEST_STORY_ID, true, {\n            contents: [\n                {\n                    id: testFileName,\n                    text: fs.readFileSync(getTestResourcePath(testFileName), \"utf8\")\n                }\n            ]\n        });\n\n        const model = <VoiceModel>importResult.alexaVoiceModel;\n\n        assert.equal(model.languageModel.intents.length - TEST_BUILT_IN_COUNT, 2, \"Unexpected number of intents for given test.\");\n    });\n\n    it(\"Import - build up intent for addional utterance\", async function() {\n        const testFileName: string = \"intent-build-up.abc\";\n        const importResult = await thinImporter.importABCStory(DEFAULT_IMPORT_PLUGIN_NAME, \"\", TEST_STORY_TITLE, TEST_STORY_ID, true, {\n            contents: [\n                {\n                    id: testFileName,\n                    text: fs.readFileSync(getTestResourcePath(testFileName), \"utf8\")\n                }\n            ]\n        });\n\n        const model = <VoiceModel>importResult.alexaVoiceModel;\n\n        assert.equal(model.languageModel.intents.length - TEST_BUILT_IN_COUNT, 1, \"Unexpected number of intents for given test.\");\n    });\n\n    it(\"Import - normal intent splitting per choice\", async function() {\n        const testFileName: string = \"normal-intent-split-per-choice.abc\";\n        const importResult = await thinImporter.importABCStory(DEFAULT_IMPORT_PLUGIN_NAME, \"\", TEST_STORY_TITLE, TEST_STORY_ID, true, {\n            contents: [\n                {\n                    id: testFileName,\n                    text: fs.readFileSync(getTestResourcePath(testFileName), \"utf8\")\n                }\n            ]\n        });\n\n        const model = <VoiceModel>importResult.alexaVoiceModel;\n\n        assert.equal(model.languageModel.intents.length - TEST_BUILT_IN_COUNT, 3, \"Unexpected number of intents for given test.\");\n    });\n});\n\nfunction getTestResourcePath(testResourceName: string) {\n    return path.resolve(__dirname, \n        \"..\", // ./dist/test\n        \"..\", // ./dist,\n        \"..\", // ./\n        \"test\", // ./test\n        \"integrationTests\", // ./test/integrationTests\n        \"testResources\", // ./test/integrationTests/testResources\n        testResourceName);\n}"]}