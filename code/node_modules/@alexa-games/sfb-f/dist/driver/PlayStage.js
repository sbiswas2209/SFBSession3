"use strict";
/*
 * Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.
 *
 * SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *   http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayStage = void 0;
class PlayStage {
    constructor(audioItemUtil) {
        this.audioItemUtil = audioItemUtil;
        this.visitedSceneIDsOnRun = [];
        this.speechAudioSequence = [];
        this.repromptAudioSequence = [];
        this.recapAudioSequence = [];
        this.visualOptions = undefined;
        this.currentSceneID = "";
        this.currentSceneAudioQueue = {
            foreground: [],
            background: []
        };
        this.currentSceneRepromptAudioQueue = {
            foreground: [],
            background: []
        };
        this.currentSceneRecapAudioQueue = {
            foreground: [],
            background: []
        };
        this.resetStage();
    }
    resetStage() {
        this.currentSceneID = "";
        this.visitedSceneIDsOnRun = [];
        this.speechAudioSequence = [];
        this.repromptAudioSequence = [];
        this.recapAudioSequence = [];
        this.visualOptions = undefined;
        this.currentSceneAudioQueue = {
            foreground: [],
            background: []
        };
        this.currentSceneRepromptAudioQueue = {
            foreground: [],
            background: []
        };
        this.currentSceneRecapAudioQueue = {
            foreground: [],
            background: []
        };
    }
    logVisitedScene(sceneID) {
        this.visitedSceneIDsOnRun.push(sceneID);
    }
    getVisitedSceneIDsOnRun() {
        return this.visitedSceneIDsOnRun;
    }
    getStageSpeechAudioSequence(keepScenesSeperate) {
        return this.audioItemUtil.condensePollyItem(this.speechAudioSequence, keepScenesSeperate);
    }
    getStageRepromptAudioSequence() {
        return this.audioItemUtil.condensePollyItem(this.repromptAudioSequence);
    }
    getStageRecapAudioSequence() {
        return this.audioItemUtil.condensePollyItem(this.recapAudioSequence);
    }
    getStageVisualOptions() {
        return this.visualOptions;
    }
    setStageSpeechAudioSequence(audio) {
        this.speechAudioSequence = audio;
    }
    setStageRepromptAudioSequence(audio) {
        this.repromptAudioSequence = audio;
    }
    setStageRecapAudioSequence(audio) {
        this.recapAudioSequence = audio;
    }
    setStageVisualOptions(visuals) {
        this.visualOptions = visuals;
    }
    appendStageSpeechAudioSequence(audio) {
        this.speechAudioSequence = this.speechAudioSequence.concat(audio);
    }
    appendStageRepromptAudioSequence(audio) {
        this.repromptAudioSequence = this.repromptAudioSequence.concat(audio);
    }
    appendStageRecapAudioSequence(audio) {
        this.recapAudioSequence = this.recapAudioSequence.concat(audio);
    }
    appendStageVisuals(visuals) {
        if (!this.visualOptions) {
            this.visualOptions = [];
        }
        // Set the sceneID for these visuals to the current scene
        visuals.sceneID = this.currentSceneID;
        this.visualOptions.push(visuals);
    }
    startNewScene(sceneID) {
        this.currentSceneID = sceneID;
        this.currentSceneAudioQueue = {
            sceneID,
            foreground: [],
            background: []
        };
        this.currentSceneRepromptAudioQueue = {
            sceneID,
            foreground: [],
            background: []
        };
        this.currentSceneRecapAudioQueue = {
            sceneID,
            foreground: [],
            background: []
        };
    }
    appendSceneSpeechForeground(audioItem) {
        this.currentSceneAudioQueue.foreground = this.currentSceneAudioQueue.foreground.concat(audioItem);
    }
    appendSceneSpeechBackground(audioItem) {
        this.currentSceneAudioQueue.background = this.currentSceneAudioQueue.foreground.concat(audioItem);
    }
    appendSceneRepromptForeground(audioItem) {
        this.currentSceneRepromptAudioQueue.foreground = this.currentSceneRepromptAudioQueue.foreground.concat(audioItem);
    }
    appendSceneRepromptBackground(audioItem) {
        this.currentSceneRepromptAudioQueue.background = this.currentSceneRepromptAudioQueue.background.concat(audioItem);
    }
    appendSceneRecapForeground(audioItem) {
        this.currentSceneRecapAudioQueue.foreground = this.currentSceneRecapAudioQueue.foreground.concat(audioItem);
    }
    appendSceneRecapBackground(audioItem) {
        this.currentSceneRecapAudioQueue.background = this.currentSceneRecapAudioQueue.background.concat(audioItem);
    }
    getSpeechSceneAudio() {
        return this.currentSceneAudioQueue;
    }
    getRepromptSceneAudio() {
        return this.currentSceneRepromptAudioQueue;
    }
    getRecapSceneAudio() {
        return this.currentSceneRecapAudioQueue;
    }
    closeScene() {
        if (this.currentSceneAudioQueue.foreground.length > 0 || this.currentSceneAudioQueue.background.length > 0) {
            this.speechAudioSequence = this.speechAudioSequence.concat(this.currentSceneAudioQueue);
        }
        if (this.currentSceneRepromptAudioQueue.foreground.length > 0 || this.currentSceneRepromptAudioQueue.background.length > 0) {
            this.repromptAudioSequence = this.repromptAudioSequence.concat(this.currentSceneRepromptAudioQueue);
        }
        if (this.currentSceneRecapAudioQueue.foreground.length > 0 || this.currentSceneRecapAudioQueue.background.length > 0) {
            this.recapAudioSequence = this.recapAudioSequence.concat(this.currentSceneRecapAudioQueue);
        }
    }
}
exports.PlayStage = PlayStage;
//# sourceMappingURL=PlayStage.js.map