"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigAccessor = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const sfb_util_1 = require("@alexa-games/sfb-util");
const _ = __importStar(require("lodash"));
class ConfigAccessor {
    constructor(abcConfig, contentPath) {
        this.abcConfig = abcConfig;
        this.contentPath = path.resolve(contentPath);
    }
    set deployed(value) {
        this.deployedFlag = value;
    }
    setValue(keyName, val, stage, locale) {
        stage = (stage) ? stage.toLowerCase() : stage;
        locale = (locale) ? locale.toLowerCase() : locale;
        if (stage && locale) {
            _.set(this.abcConfig, stage + "-" + locale + "." + keyName, val);
            return;
        }
        if (stage) {
            _.set(this.abcConfig, stage + "." + keyName, val);
            return;
        }
        if (locale) {
            _.set(this.abcConfig, locale + "." + keyName, val);
            return;
        }
        _.set(this.abcConfig, "default." + keyName, val);
        return;
    }
    get askSkillDirectoryName() {
        return this.getValue("ask-skill-directory-name");
    }
    get validResourceFileExtensions() {
        return this.getValue("valid-resource-file-extensions") || ["json", "csv"];
    }
    get additionalResourceDirectories() {
        return this.getValue("additional-resource-directories") || ["apl-templates"];
    }
    get publishLocales() {
        return this.getValue("publish-locales");
    }
    get useLambdaLayer() {
        return this.getValue("use-lambda-layer") || false;
    }
    getResourcePath(locale) {
        const resourcesPathWithLocaleAndResources = path.join(this.contentPath, locale, "resources");
        if (this.deployedFlag === undefined) {
            if (fs.existsSync(resourcesPathWithLocaleAndResources)) {
                return resourcesPathWithLocaleAndResources;
            }
        }
        else if (this.deployedFlag === false) {
            return resourcesPathWithLocaleAndResources;
        }
        return path.join(this.contentPath, locale);
    }
    getS3ResourcesUri(locale) {
        return `https://${this.getS3DomainName(locale)}/${this.getS3BucketName(locale)}/${this.getAskSkillPath(locale)}/${locale}`;
    }
    getS3DomainName(locale) {
        return this.getValue("s3-domain-name", undefined, locale);
    }
    getS3BucketName(locale) {
        return this.getValue("s3-bucket-name", undefined, locale);
    }
    getSnippetMapFilePath(locale) {
        return path.join(this.getResourcePath(locale), this.getValue("snippet-map-filename", undefined, locale));
    }
    getAskSkillPath(locale) {
        return this.getValue("ask-skill-directory-name", undefined, locale);
    }
    shouldOverwriteWithSource(locale) {
        return this.getValue("update-string-with-source", undefined, locale);
    }
    getAplTemplatesFilePath(locale) {
        return path.resolve(this.getResourcePath(locale), this.getValue("apl-templates-filename", undefined, locale));
    }
    getAplCommandsFilePath(locale) {
        const aplCommandsFilename = this.getValue("apl-commands-filename", undefined, locale);
        return aplCommandsFilename ? path.resolve(this.getResourcePath(locale), aplCommandsFilename) : "";
    }
    getValue(keyName, stage, locale, skipLocaleMapping, skillId) {
        stage = (stage) ? stage.toLowerCase() : stage;
        locale = (locale) ? locale.toLowerCase() : locale;
        if (!stage) {
            stage = process.env.stage;
        }
        if (!locale) {
            locale = process.env.locale;
        }
        if (!stage) {
            stage = ConfigAccessor.defaultStage;
        }
        if (!locale) {
            locale = ConfigAccessor.defaultLocale;
        }
        let mappedLocaleToUse = locale;
        let val = undefined;
        if (skillId) {
            val = _.get(this.abcConfig, [skillId, keyName]);
            if (val) {
                return val;
            }
        }
        val = _.get(this.abcConfig, stage + "-" + mappedLocaleToUse + "." + keyName);
        if (val) {
            return val;
        }
        val = _.get(this.abcConfig, stage + "." + keyName);
        if (val) {
            return val;
        }
        val = _.get(this.abcConfig, mappedLocaleToUse + "." + keyName);
        if (val) {
            return val;
        }
        val = _.get(this.abcConfig, "default." + keyName);
        if (val) {
            return val;
        }
        return val;
    }
    getRequestLocalizedValue(keyName, event) {
        let locale = _.get(event, "request.locale");
        let skillId = _.get(event, "session.application.applicationId");
        return this.getValue(keyName, process.env.stage, locale, false, skillId);
    }
    static async loadConfigFile(configFile, contentPath) {
        const data = await sfb_util_1.readUtf8FileExcludingBom(configFile);
        return new ConfigAccessor(JSON.parse(data), contentPath);
    }
}
exports.ConfigAccessor = ConfigAccessor;
ConfigAccessor.defaultStage = "dev";
ConfigAccessor.defaultLocale = "en-us";
//# sourceMappingURL=configAccessor.js.map