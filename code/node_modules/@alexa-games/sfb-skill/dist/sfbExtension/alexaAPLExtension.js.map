{"version":3,"file":"alexaAPLExtension.js","sourceRoot":"","sources":["../../src/sfbExtension/alexaAPLExtension.ts"],"names":[],"mappings":";;;AAmBA,sDAAmD;AAEnD,MAAa,iBAAiB;IAE1B,YAAY,MAAc,EAAE,cAA8B;QACtD,IAAI;YACA,IAAI,CAAC,SAAS,GAAG,IAAI,qBAAS,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;SAC1D;QAAC,OAAO,GAAG,EAAE;YACV,MAAuB;gBACnB,YAAY,EAAE,GAAG;gBACjB,SAAS,EAAE,qBAAqB;gBAChC,UAAU,EAAE,CAAC;gBACb,QAAQ,EAAE,cAAc;aAC3B,CAAC;SACL;IACL,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,KAA+B;QACtC,MAAM,YAAY,GAAG,KAAK,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;QAC7D,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QAE5B,IAAI,gBAAgB,GAAgC,MAAM,MAAM,CAAC,UAAU,EAAE,CAAC;QAEpF,IAAI,YAAY,IAAI,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,YAAY,CAAC,EAAE;YACrF,IAAI,gBAAgB,GAAU,IAAI,CAAC,SAAS,CAAC,qCAAqC,CAAC,gBAAgB,CAAC,CAAC;YACrG,KAAK,IAAI,YAAY,IAAI,gBAAgB,EAAE;gBAC1C,YAAY,CAAC,eAAe,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;aACxD;SACD;IACC,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,KAA+B;IACzC,CAAC;CACJ;AA/BD,8CA+BC","sourcesContent":["/* \n * Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.\n *\n * SPDX-License-Identifier: LicenseRef-.amazon.com.-AmznSL-1.0\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *   http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n\nimport { DriverExtension, DriverExtensionParameter, VisualOptions, ImportErrorLine } from '@alexa-games/sfb-f';\nimport { ConfigAccessor } from './../configAccessor';\nimport { APLHelper } from './../handler/APLHelper';\n\nexport class AlexaAPLExtension implements DriverExtension {\n    protected aplHelper: APLHelper;\n    constructor(locale: string, configAccessor: ConfigAccessor) {\n        try {\n            this.aplHelper = new APLHelper(locale, configAccessor);\n        } catch (err) {\n            throw <ImportErrorLine>{\n                errorMessage: err,\n                errorName: 'APL Extension Error',\n                lineNumber: 0,\n                sourceID: \"APL_TEMPLATE\"\n            };\n        }\n    }\n\n    async post(param: DriverExtensionParameter) {\n        const handlerInput = param.userInputHelper.getHandlerInput();\n        const driver = param.driver;\n\n        let visualProperties: VisualOptions[] | undefined = await driver.getVisuals();\n\n\t\tif (handlerInput && visualProperties && this.aplHelper.supportsDisplay(handlerInput)) {\n\t\t\tlet visualDirectives: any[] = this.aplHelper.generateAPLDirectiveWithVisualOptions(visualProperties);\n\t\t\tfor (let aplDirective of visualDirectives) {\n\t\t\t\thandlerInput.responseBuilder.addDirective(aplDirective);\n\t\t\t}\n\t\t}\n    }\n\n    async pre(param: DriverExtensionParameter) {\n    }\n}"]}