"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const assert_1 = require("assert");
const configAccessor_1 = require("../../configAccessor");
const alexaMonetizationExtension_1 = require("../../sfbExtension/alexaMonetizationExtension");
const sfb_f_1 = require("@alexa-games/sfb-f");
const testUtil = __importStar(require("./testUtil"));
const CONFIG_FILE = "./src/test/data/abcConfig.json";
describe('Alexa Monetization Extension Test', () => {
    it('Initialization', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "./src/test/data");
        const alexaMonetizationExtension = new alexaMonetizationExtension_1.AlexaMonetizationExtension('en-us', config);
        assert_1.strict.ok(alexaMonetizationExtension);
    });
    it('Test buy post', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "./src/test/data");
        const alexaMonetizationExtension = new alexaMonetizationExtension_1.AlexaMonetizationExtension('en-us', config);
        await alexaMonetizationExtension.buy(testUtil.getMockInstructionParameter("buy", { "item": "sample product" }));
        const userInputHelper = new sfb_f_1.UserInputHelper(testUtil.testUserInput);
        const param = { storyState: {},
            userInputHelper,
            driver: testUtil.getDefaultBaseDriver(),
            locale: 'en-US'
        };
        await alexaMonetizationExtension.post(param);
    });
    it('Test refund post', async () => {
        const config = await configAccessor_1.ConfigAccessor.loadConfigFile(path.resolve(CONFIG_FILE), "./src/test/data");
        const alexaMonetizationExtension = new alexaMonetizationExtension_1.AlexaMonetizationExtension('en-us', config);
        await alexaMonetizationExtension.buy(testUtil.getMockInstructionParameter("refund", { "item": "sample product" }));
        const userInputHelper = new sfb_f_1.UserInputHelper(testUtil.testUserInput);
        const param = { storyState: {},
            userInputHelper,
            driver: testUtil.getDefaultBaseDriver(),
            locale: 'en-US'
        };
        await alexaMonetizationExtension.post(param);
    });
});
//# sourceMappingURL=alexaMonetizationExtension.spec.js.map